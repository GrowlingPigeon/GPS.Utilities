using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace GrowlingPigeonStudio.Utilities
{
  /// <summary>
  /// Object pooler.
  /// </summary>
  /// <typeparam name="T">Object type to pool.</typeparam>
  public class ObjectPooler<T>
  {
    /// <summary>
    /// Stack of objects. Stack is just as good as List but makes adding and removing easier to code and maintain.
    /// </summary>
    private readonly Stack<T> objects = new Stack<T>();

    /// <summary>
    /// Generator callback. Performs generation of object if object pool is empty.
    /// </summary>
    private readonly Func<T> generatorCallback;

    /// <summary>
    /// Recycle callback. Performs actions on objects that are recycled back to the object pool.
    /// </summary>
    private readonly Action<T> recycleCallback;

    /// <summary>
    /// Gets total number of objects generated by this object pool.
    /// </summary>
    public int TotalGenerated { get; private set; } = 0;

    /// <summary>
    /// Gets number of objects currently in the pool.
    /// </summary>
    public int Count => this.objects.Count;

    /// <summary>
    /// Initializes a new instance of the <see cref="ObjectPooler{T}"/> class.
    /// </summary>
    /// <param name="generatorCallback">Generator callback.</param>
    public ObjectPooler(Func<T> generatorCallback)
    {
      this.generatorCallback = generatorCallback;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ObjectPooler{T}"/> class.
    /// </summary>
    /// <param name="generatorCallback">Generator callback.</param>
    /// <param name="recycleCallback">Recycle callback.</param>
    public ObjectPooler(Func<T> generatorCallback, Action<T> recycleCallback)
      : this(generatorCallback)
    {
      this.recycleCallback = recycleCallback;
    }

    /// <summary>
    /// Recycles object.
    /// </summary>
    /// <param name="entry">Entry to recycle.</param>
    public void Recycle(T entry)
    {
      if (entry is null)
      {
        return;
      }

      this.recycleCallback?.Invoke(entry);
      this.objects.Push(entry);
    }

    /// <summary>
    /// Gets or creates object.
    /// </summary>
    /// <returns>Object found or created.</returns>
    public T GetOrCreate()
    {
      if (this.Count > 0)
      {
        return this.objects.Pop();
      }

      if (this.generatorCallback is null)
      {
        return default;
      }

      var toReturn = this.generatorCallback.Invoke();
      if (toReturn is { })
      {
        this.TotalGenerated++;
      }

      return toReturn;
    }
  }
}